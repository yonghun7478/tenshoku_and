---
description: 
globs: 
alwaysApply: true
---
# 화면 컴포저블 구조 규칙

이 규칙은 Tokitoki 프로젝트의 화면 단위 컴포저블에 대한 일반적인 구조를 정의합니다. 기존 화면 분석을 기반으로 하며, 전반적인 `composable-rule`과 일치합니다.


## 일반적인 패턴

1.  **화면 컴포저블 (`[ScreenName]Screen.kt`)**
    *   **이름 규칙:** `[ScreenName]Screen` 패턴을 따릅니다 (예: `TagSearchScreen`, `LoginScreen`).
    *   **ViewModel 주입:** `viewModel: [ScreenName]ViewModel = hiltViewModel()`을 사용하여 해당 `ViewModel`을 주입합니다.
    *   **상태 수집:** 일반적으로 `val uiState by viewModel.uiState.collectAsStateWithLifecycle()` 또는 `collectAsState()`를 사용하여 `ViewModel`의 UI 상태를 관찰합니다.
        *   `ViewModel`이 여러 상태 흐름을 별도로 노출하는 경우 여러 상태 흐름을 수집할 수 있습니다.
    *   **탐색 매개변수:** 탐색 람다 함수를 매개변수로 받습니다 (예: `onNavigateToDetail: (String) -> Unit`, `onNavigateUp: () -> Unit`).
    *   **Contents 위임:** 해당 `[ScreenName]Contents` 컴포저블을 호출하여 다음을 전달합니다:
        *   수집된 UI 상태.
        *   일반적으로 `ViewModel` 함수를 호출하는 이벤트 핸들러 (예: `onRefresh = viewModel::refreshData`, `onItemClick = { itemId -> viewModel.onItemClicked(itemId) }`).
        *   탐색 람다.
    *   **예제 파일:** [TagSearchScreen.kt](mdc:app/src/main/java/com/example/tokitoki/ui/screen/TagSearchScreen.kt)
    *   **예제 파일:** [MainScreen.kt](mdc:app/src/main/java/com/example/tokitoki/ui/screen/MainScreen.kt)

2.  **Contents 컴포저블 (`[ScreenName]Contents.kt` 또는 동일 파일 내)**
    *   **이름 규칙:** `[ScreenName]Contents` 패턴을 따릅니다 (예: `TagSearchScreenContents`, `LoginScreenContents`). 최상위 컴포저블이거나 `Screen` 파일 내의 비공개 컴포저블일 수 있습니다.
    *   **매개변수:**
        *   필요한 모든 UI 데이터(상태)를 매개변수로 받습니다 (예: `uiState: MyScreenUiState`).
        *   모든 이벤트 콜백 람다를 매개변수로 받습니다 (예: `onRefresh: () -> Unit`, `onItemClick: (String) -> Unit`).
        *   `modifier: Modifier = Modifier` 매개변수를 포함합니다.
    *   **책임:** 제공된 상태를 기반으로 UI를 렌더링하고 이벤트 콜백을 호출하는 유일한 책임을 가집니다.
    *   **상태 비소유(Stateless):** 자체 상태를 보유하지 않으며 `ViewModel`에 직접 접근하지 않습니다.
    *   **미리보기 가능:** 쉽게 미리보기할 수 있도록 설계되었습니다.
    *   **예제 파일:** [TagSearchScreen.kt](mdc:app/src/main/java/com/example/tokitoki/ui/screen/TagSearchScreen.kt) (`TagSearchScreenContents` 참조)
    *   **예제 파일:** [MainScreen.kt](mdc:app/src/main/java/com/example/tokitoki/ui/screen/MainScreen.kt) (`MainContents` 참조)

3.  **미리보기 컴포저블 (일반적으로 `Contents`용)**
    *   **어노테이션:** `@Preview` 및 종종 `@Composable`을 사용합니다.
    *   **이름 규칙:** 일반적으로 `[ScreenName]ContentsPreview` 또는 다른 상태를 나타내는 변형입니다 (예: `MyScreenContentsEmptyPreview`, `MyScreenContentsLoadingPreview`).
    *   **목적:** Android Studio에서 디자인 타임 미리보기를 위해 `Contents` 컴포저블에 샘플 데이터와 빈 람다 구현을 제공합니다.
    *   **위치:** 일반적으로 `Contents` 컴포저블과 동일한 파일에 정의됩니다.
    *   **예제 (개념적, 특정 예제는 `composable-rule` 참조):**
        ```kotlin
        @Preview(showBackground = true)
        @Composable
        fun MyScreenContentsPreview() {
            MyTheme { // 테마가 정의되어 있다고 가정합니다.
                MyScreenContents(
                    uiState = MyScreenUiState(isLoading = false, data = "샘플 데이터"),
                    onRefresh = {},
                    onItemClick = {}
                )
            }
        }
        ```

## `composable-rule`의 핵심 원칙 강조

*   **Screen 및 Contents 분리:** 로직/ViewModel 상호 작용을 위한 `Screen` 컴포저블과 순수 UI 렌더링을 위한 `Contents` 컴포저블을 갖는 패턴이 일관되게 적용됩니다.
*   **상태 호이스팅:** 상태는 `ViewModel`이 소유하고 아래로 전달됩니다. 이벤트는 위로 전달됩니다.
*   **ViewModel 중심 상태:** `ViewModel`은 화면 UI 상태의 유일한 정보 소스입니다.
*   **상태 비소유 `Contents`:** `Contents` 컴포저블은 더 나은 재사용성과 테스트 용이성을 위해 상태를 갖지 않도록 유지됩니다.

이 구조는 관심사를 깔끔하게 분리하여 UI 코드를 더욱 테스트하기 쉽고 유지보수하기 쉬우며 이해하기 쉽게 만들어 프로젝트의 클린 아키텍처 및 Jetpack Compose 모범 사례 채택과 일치합니다.


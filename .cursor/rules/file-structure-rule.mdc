---
description: 프로젝트 파일 구조 가이드라인
globs: 
alwaysApply: false
---
# 프로젝트 파일 구조 가이드라인

## 1. 기본 패키지 구조 (/app/src/main/java/com/example/tokitoki/)
- `app/`      : 앱 초기화, DI 설정 등
- `data/`     : 데이터 레이어 관련 코드
- `domain/`   : 도메인 레이어 관련 코드
- `ui/`       : UI 레이어 관련 코드
- `common/`   : 공통 유틸리티, 확장 함수 등
- `di/`       : 의존성 주입 모듈

## 2. Data 레이어 구조 (/data)
- `model/`          : DTO(Data Transfer Object) 클래스
- `repository/`     : Repository 구현체
- `mapper/`         : DTO와 도메인 모델 간 매핑 함수
- `source/`         : 데이터 소스 (로컬, 리모트)
  - `local/`        : 로컬 데이터 소스 관련
  - `remote/`       : 원격 데이터 소스 관련

## 3. Domain 레이어 구조 (/domain)
- `model/`          : 도메인 모델 클래스
- `repository/`     : Repository 인터페이스
- `usecase/`        : UseCase 클래스들
  - `[feature]/`    : 기능별 UseCase 그룹 (예: auth/, user/, profile/)

## 4. UI 레이어 구조 (/ui)
- `state/`          : UI 상태 클래스들
- `viewmodel/`      : ViewModel 클래스들
- `screen/`         : 화면별 Composable 함수들
- `component/`      : 재사용 가능한 UI 컴포넌트
- `theme/`          : 테마 관련 (색상, 타이포그래피 등)
- `navigation/`     : 네비게이션 관련

## 5. DI 모듈 구조 (/di)
- `TokiTokiRepositoryModule.kt`  : Repository 바인딩
- `UseCaseModule.kt`            : UseCase 바인딩
- `NetworkModule.kt`            : 네트워크 관련 의존성
- `DatabaseModule.kt`           : 데이터베이스 관련 의존성

## 6. 파일 명명 규칙
- DTO: `[Name]Dto.kt`
- 도메인 모델: `[Name].kt`
- Repository 인터페이스: `[Name]Repository.kt`
- Repository 구현체: `[Name]RepositoryImpl.kt`
- UseCase 인터페이스: `[Verb][Name]UseCase.kt`
- UseCase 구현체: `[Verb][Name]UseCaseImpl.kt`
- ViewModel: `[ScreenName]ViewModel.kt`
- UI 상태: `[ScreenName]UiState.kt`
- Composable: `[ScreenName]Screen.kt`
- 매퍼: `[Name]Mapper.kt`

## 7. 화면별 구조
새로운 화면 추가 시 다음 파일들을 각각의 위치에 생성:
1. `/ui/state/[ScreenName]UiState.kt`
2. `/ui/viewmodel/[ScreenName]ViewModel.kt`
3. `/ui/screen/[screenname]/[ScreenName]Screen.kt`

## 8. 기능별 구조
새로운 기능 추가 시 다음 순서로 파일 생성:
1. `/data/model/[Name]Dto.kt`
2. `/domain/model/[Name].kt`
3. `/data/mapper/[Name]Mapper.kt`
4. `/domain/repository/[Name]Repository.kt`
5. `/data/repository/[Name]RepositoryImpl.kt`
6. `/domain/usecase/[feature]/[Verb][Name]UseCase.kt`
7. `/domain/usecase/[feature]/[Verb][Name]UseCaseImpl.kt`
8. Repository와 UseCase 바인딩을 각각 TokiTokiRepositoryModule과 UseCaseModule에 추가

## 9. 테스트 구조 (/app/src/test/)
- 단위 테스트 파일은 실제 코드와 동일한 패키지 구조를 따름
- 테스트 클래스 이름: `[TestedClass]Test.kt`

## 10. 안드로이드 테스트 구조 (/app/src/androidTest/)
- UI 테스트와 통합 테스트용
- 실제 코드와 동일한 패키지 구조를 따름
- 테스트 클래스 이름: `[TestedClass]AndroidTest.kt`

## 이점
1. 코드의 일관성 유지
2. 파일 위치 예측 가능
3. 새로운 기능 추가 시 명확한 가이드라인 제공
4. 클린 아키텍처 원칙 준수

5. 테스트 용이성 확보 
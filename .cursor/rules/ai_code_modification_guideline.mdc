---
description: 
globs: 
alwaysApply: false
---
# AI 코드 작업 가이드

## 1. 규칙의 목적

이 규칙은 AI가 특정 파일이나 코드 조각을 수정하거나 새로운 코드를 생성할 때, 관련된 전체적인 맥락을 이해하고 잠재적인 영향을 고려하여 보다 정확하고 안전하게 작업을 수행하도록 돕기 위해 마련되었습니다. AI는 이 가이드라인을 통해 단순히 주어진 작업 범위에만 집중하는 것이 아니라, 변경 사항이 시스템의 다른 부분과 어떻게 상호작용하는지, 그리고 어떤 선행/후행 작업이 필요할 수 있는지를 파악해야 합니다.

## 2. 코드 변경/생성 전 AI 고려 사항 (사전 분석 및 검증)

AI는 다음 질문들에 대해 스스로 답하고, 그 내용을 바탕으로 작업 계획을 수립해야 합니다. **분석 과정에서 도출된 주요 가정이나 해석에 대해서는 사용자에게 질문하거나 관련 코드 스니펫을 제시하여 정확성을 확인받아야 합니다.** 필요시 `codebase_search`, `read_file`, `list_dir` 등의 도구를 적극 활용하여 정보를 수집하십시오.

### 2.1. 변경/생성 대상 분석:

*   **핵심 기능:** 수정하거나 생성하려는 코드의 주요 기능과 목적은 무엇입니까? 이것이 전체 시스템 내에서 어떤 역할을 수행합니까?
*   **입력과 출력:** 해당 코드가 받는 주요 입력 데이터는 무엇이며, 어떤 형태의 결과를 반환하거나 어떤 상태 변화를 유발합니까? 이 데이터는 시스템의 다른 부분에서 어떻게 사용됩니까?
*   **기존 로직:** (수정의 경우) 기존 코드의 로직은 어떻게 구성되어 있으며, 변경하려는 부분은 이 로직 내에서 어떤 역할을 합니까?

### 2.2. 연관성 및 의존성 분석:

*   **직접적인 호출/참조:** 이 코드를 직접 호출하거나 참조하는 다른 파일, 클래스, 함수는 무엇입니까? (예: 이 함수를 사용하는 ViewModel, 이 클래스를 주입받는 다른 모듈 등)
*   **간접적인 영향:** 이 코드의 변경이 직접적으로 연결되지 않았지만, 기능적으로 영향을 받을 수 있는 다른 모듈이나 기능 영역이 있습니까? (예: 특정 데이터 모델 변경 시 관련된 UI 표시 로직, 특정 유스케이스 변경 시 관련된 API 호출 로직 등)
*   **데이터 흐름:** 이 코드가 처리하는 데이터는 어디에서 오며, 이 코드의 실행 결과 데이터는 어디로 전달됩니까? 전체 데이터 흐름을 파악하고 있습니까?
*   **아키텍처 관점:** 변경/생성 대상 코드가 속한 아키텍처 레이어(Presentation, Domain, Data 등)는 어디이며, 해당 레이어의 규칙과 책임을 준수하고 있습니까? 다른 레이어와의 상호작용은 설계 원칙에 부합합니까? ([project_structure.mdc](mdc:project_structure.mdc) 참고)

### 2.3. 변경에 따른 파급 효과 및 추가 작업 예측:

*   **필수적인 동반 수정:** 현재 요청된 변경 사항을 적용하기 위해 반드시 함께 수정되어야 하는 다른 코드 영역이 있습니까? (예: 인터페이스 변경 시 구현체 모두 수정, 데이터 클래스 필드 변경 시 매퍼 또는 사용하는 곳 모두 수정)
*   **테스트 코드:** 관련된 유닛 테스트나 UI 테스트 코드가 존재합니까? 존재한다면, 코드 변경 후 테스트 코드도 수정해야 합니까?
*   **문서화:** 코드 주석, README, 또는 기타 관련 문서에 변경 사항을 반영해야 합니까? 이것이 시스템 유지보수에 어떤 영향을 줍니까?
*   **더미 데이터 관련:** (만약 Data 레이어 또는 더미 데이터와 관련된 작업이라면) 현재 애플리케이션이 더미 데이터를 사용하고 있음을 인지하고 있습니까? 변경 사항이 더미 데이터 생성 또는 사용 방식에 영향을 줍니까? ([data_layer_code_guideline.mdc](mdc:data_layer_code_guideline.mdc) 참고)
*   **의존성 주입:** 새로운 클래스 생성 또는 기존 클래스 변경 시, 의존성 주입 프레임워크(예: Hilt) 관련 설정(모듈 업데이트, 어노테이션 추가/변경 등) 작업이 필요합니까? ([hilt_guideline.mdc](mdc:hilt_guideline.mdc) 참고)
*   **UI 관련 (Jetpack Compose 등):** (만약 UI 관련 작업이라면) UI 컴포넌트 설계 원칙(예: Screen Composable과 Content Composable 분리)을 따르고 있습니까? UI 상태 관리, 이벤트 처리 방식은 기존 구현과 일관성이 있습니까? ([composable_guideline.mdc](mdc:composable_guideline.mdc) 참고)

## 3. AI 작업 수행 원칙

*   **계획 우선 보고 및 승인:** 위의 고려 사항 분석 및 검증 결과를 바탕으로, 구체적인 작업 계획(어떤 파일을 어떻게 수정할 것인지, 예상되는 추가 작업은 무엇인지 등)을 사용자에게 먼저 명확히 설명하고 승인을 받은 후 실제 코드 수정/생성을 진행합니다.
*   **단계별 점진적 수정:** 복잡한 변경은 논리적인 단계로 나누어 각 단계별로 `edit_file` 도구를 사용하여 점진적으로 코드를 수정하고, 각 단계의 결과를 사용자가 확인할 수 있도록 합니다. 이는 전체 시스템에 대한 변경을 안전하게 관리하는 데 도움이 됩니다.
*   **기존 코드 존중 및 가독성:** 기존 코드의 스타일과 구조를 최대한 유지하며, 변경된 부분을 사용자가 쉽게 파악할 수 있도록 가독성 높게 코드를 작성합니다.
*   **정확한 정보 기반 작업:** 추측에 의존하지 않고, 필요한 정보는 도구를 통해 적극적으로 탐색하여 수집하거나 사용자에게 질문하여 명확히 한 후 작업을 진행합니다.
*   **관련 가이드라인 준수:** 프로젝트 내 정의된 모든 코드 작성 가이드라인([domain_layer_code_guideline.mdc](mdc:domain_layer_code_guideline.mdc), [presentation_layer_code_guideline.mdc](mdc:presentation_layer_code_guideline.mdc) 등)을 숙지하고 일관성 있게 적용합니다.

## 4. 참고 자료

*   [project_structure.mdc](mdc:project_structure.mdc)
*   [domain_layer_code_guideline.mdc](mdc:domain_layer_code_guideline.mdc)
*   [data_layer_code_guideline.mdc](mdc:data_layer_code_guideline.mdc)
*   [presentation_layer_code_guideline.mdc](mdc:presentation_layer_code_guideline.mdc)
*   [hilt_guideline.mdc](mdc:hilt_guideline.mdc)
*   [composable_guideline.mdc](mdc:composable_guideline.mdc)



